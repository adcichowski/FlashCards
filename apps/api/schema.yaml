openapi: 3.0.0
info:
  title: REST API Docs
  version: 0.0.1
components:
  securitySchemas:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    GetCard:
      type: object
      properties:
        question:
          type: string
        answer:
          type: string
        shapeId:
          type: number
          default: 1
        createdBy:
          type: string
        subject:
          type: string
        section:
          type: string
        rates:
          type: object
          properties:
            overall:
              type: number
            list:
              type: array
              items:
                type: object
                properties:
                  username:
                    type: string
                  rate:
                    type: number
    Register:
      type: object
      required:
        - email
        - password
        - username
      properties:
        email:
          type: string
          maximum: 60
        password:
          type: string
          maximum: 60
          minimum: 12
        username:
          type: string
          maximum: 32
    Login:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          maximum: 60
        password:
          type: string
          maximum: 60
          minimum: 12
    CreateCardInput:
      type: object
      required:
        - question
        - answer
        - shapeId
        - userId
        - subjectId
        - rate
      properties:
        question:
          type: string
        answer:
          type: string
        shapeId:
          type: number
          default: 1
        userId:
          type: number
        subjectId:
          type: number
        rate:
          type: object
          readOnly: true
          properties:
            userId:
              type: number
            rate:
              type: number
    CreateRateInput:
      type: object
      required:
        - rate
        - userId
        - cardId
      properties:
        rate:
          type: number
          maximum: 5
          minimum: 1
          required: true
        userId:
          type: number
          required: true
        cardId:
          type: number
          required: true
security:
  - bearerAuth: []
paths:
  /sessions:
    post:
      tags:
        - Authentication
      consumes:
        - application/json
      description: Register user to database.
      parameters:
        - in: body
          name: body
          description: Card object that needs to be added to the store
          required: true
          schema:
            $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: App is up and running
        '401':
          description: User is exist in database
    delete:
      tags:
        - Authentication
      description: Register user to database.
      parameters:
        - in: body
          name: body
          description: Card object that needs to be added to the store
          required: true
          schema:
            $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: App is up and running
        '401':
          description: User is exist in database
  /users:
    post:
      tags:
        - Authentication
      description: Register user to database.
      parameters:
        - in: body
          name: body
          description: Card object that needs to be added to the store
          required: true
          schema:
            $ref: '#/components/schemas/Register'
      responses:
        '200':
          description: App is up and running
        '401':
          description: User is exist in database
  /cards:
    get:
      tags:
        - Cards
      description: Recive cards from database
      responses:
        '200':
          description: App is up and running
        '400':
          description: Invalid Subject supplied
        '404':
          description: Cards not found
      summary: Get cards
      parameters:
        - name: subject
          in: query
          description: Card subject that need to be considered for filter
          type: array
          items:
            type: string
            enum:
              - available
              - pending
              - sold
    post:
      tags:
        - Cards
      summary: Create card
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Card object that needs to be added to the store
          required: true
          schema:
            $ref: '#/components/schemas/CreateCardInput'
  /cards/{cardId}:
    get:
      tags:
        - Cards
      summary: Find card by ID
      description: Return a single card
      parameters:
        - name: cardId
          in: path
          description: ID of card to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Return list cards
          content: null
          application/json:
            schema:
              $ref: '#/components/schemas/GetCard'
        '400':
          description: Invalid ID supplied
        '404':
          description: Card not found
tags: []
