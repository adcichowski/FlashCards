servers:
  - url: random.local:3001
openapi: 3.1.0
security: []
info:
  license:
    name: MIT
    url: https://www.mit.edu/~amini/LICENSE.md
  title: REST API Docs
  version: 0.0.1
paths:
  /articles:
    get:
      summary: Retrieve a list of articles
      tags:
        - Articles
      responses:
        '200':
          description: A list of articles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'
              examples:
                example1:
                  summary: Example article
                  value:
                    id: '1'
                    title: PostgreSQL
                    description: An open-source relational database.
                    faviconUrl: >-
                      https://www.postgresql.org/media/img/about/press/elephant.png
                    url: https://www.postgresql.org/
                    tags:
                      - id: 1
                        name: database
                      - id: 2
                        name: open source
  /articles/{id}:
    get:
      summary: Retrieve a single article by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The article ID
      responses:
        '200':
          description: A single article
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
  /articles/{articleId}:
    put:
      operationId: editArticle
      summary: Edit article
      parameters:
        - in: path
          name: articleId
          schema:
            type: uuid
          required: true
      tags:
        - Articles
      description: Edit article field
      responses:
        '200':
          content:
            application/json:
              example:
                id: cbbdddf7-ad12-46cf-9e7c-c83ec7231ad3
        '400':
          description: Problem with server
  /auth:
    post:
      operationId: loginTo
      summary: Get token
      tags:
        - Session
      description: Get new token in login
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Login'
        '400':
          description: Problem with server
  /cards:
    get:
      operationId: getCards
      summary: Get all cards
      tags:
        - Card
      description: Recive cards from database
      responses:
        '200':
          description: App is up and running
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCard'
              example:
                id: cbbdddf7-ad12-46cf-9e7c-c83ec7231ad3
                question: What values can we change?
                answer: >-
                  We can easily change let and var, but we should use it less
                  than const
                rates:
                  list:
                    - username: Artak
                      rate: '4'
                    - username: Gelis
                      rate: '2'
                  overall: 3
        '400':
          description: Problem with server
    post:
      operationId: createCard
      tags:
        - Card
      description: Create Card
      summary: Create Card
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCard'
      responses:
        '200':
          description: Successfully create card
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCard'
              example:
                cardId: desbdddf7-ad12-46cf-9e7c-c83ec7231ad3
        '400':
          description: Problem with server
components:
  schemas:
    GetToken:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        token:
          type: string
          format: JWT
    GetCard:
      type: object
      properties:
        question:
          type: string
        answer:
          type: string
        shapeId:
          type: number
          default: 1
        createdBy:
          type: string
        subject:
          type: string
        section:
          type: string
        rates:
          type: object
          properties:
            overall:
              type: number
            list:
              type: array
              items:
                type: object
                properties:
                  username:
                    type: string
                  rate:
                    type: number
    Tag:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          description: The unique identifier of the tag
        name:
          type: string
          description: The name of the tag
      example:
        id: 1
        name: technology
    Rate:
      type: object
      properties:
        sum:
          type: number
          description: The total sum of ratings for the article
          example: 10
    ArticleRate:
      type: object
      properties:
        userId:
          type: string
          description: The ID of the user who rated the article
          example: '12345'
        rate:
          type: number
          description: The rate given by the user
          example: 4
    Article:
      type: object
      required:
        - id
        - title
        - description
        - url
      properties:
        id:
          type: string
          description: The unique identifier of the article
        title:
          type: string
          description: The title of the article
        description:
          type: string
          description: A brief description of the article
        faviconUrl:
          type: string
          description: URL to the image of the article
        url:
          type: string
          description: The URL of the article
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          description: The tags associated with the article
        rate:
          $ref: '#/components/schemas/Rate'
          description: The rating information of the article
        yourRated:
          $ref: '#/components/schemas/ArticleRate'
          description: The user's specific rating of the article
      example:
        id: cbbdddf7-ad12-46cf-9e7c-c83ec7231ad3
        title: PostgreSQL
        description: The world is most advanced open source database.
        faviconUrl: https://www.postgresql.org/media/img/about/press/elephant.png
        url: https://www.postgresql.org/
        tags:
          - id: 1
            name: database
          - id: 2
            name: open source
        rate:
          sum: 15
        yourRated:
          rate: 5
    Login:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          maximum: 60
        password:
          type: string
          maximum: 60
          minimum: 12
    CreateCard:
      type: object
      required:
        - question
        - answer
        - shapeId
        - userId
        - subjectId
        - rate
      properties:
        question:
          type: string
        answer:
          type: string
        shapeId:
          type: number
          default: 1
        userId:
          type: number
        subjectId:
          type: number
        rate:
          type: object
          readOnly: true
          properties:
            userId:
              type: number
            rate:
              type: number
tags: []
