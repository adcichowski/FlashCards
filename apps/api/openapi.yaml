servers:
  - url: random.local:3001
openapi: 3.1.0
security: []
info:
  license:
    name: MIT
    url: https://www.mit.edu/~amini/LICENSE.md
  title: REST API Docs
  version: 0.0.1
paths:
  /articles:
    get:
      summary: Retrieve a list of articles
      tags:
        - Articles
      responses:
        '200':
          description: A list of articles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'
              examples:
                example1:
                  summary: Example article
                  value:
                    id: '1'
                    title: PostgreSQL
                    description: An open-source relational database.
                    faviconUrl: >-
                      https://www.postgresql.org/media/img/about/press/elephant.png
                    url: https://www.postgresql.org/
                    tags:
                      - id: 1
                        name: database
                      - id: 2
                        name: open source
  /articles/{id}:
    get:
      summary: Retrieve a single article by ID
      tags:
        - Articles
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The article ID
      responses:
        '200':
          description: A single article
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
  /articles/{articleId}:
    put:
      operationId: editArticle
      summary: Edit tags for a specific article
      parameters:
        - in: path
          name: articleId
          schema:
            type: string
          required: true
          description: The ID of the article to edit tags for
      tags:
        - Articles
      description: Edit article field
      responses:
        '200':
          content:
            application/json:
              example:
                id: cbbdddf7-ad12-46cf-9e7c-c83ec7231ad3
              schema:
                type: object
                properties:
                  article:
                    $ref: '#/components/schemas/Article'
          description: Tags successfully updated
        '400':
          description: Invalid request
        '401':
          description: Unauthorized - User is not authenticated
        '404':
          description: Article not found
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  type: array
                  items:
                    type: string
                  description: >-
                    Array of tag IDs. Empty array removes all tags. New tags
                    will be added, existing tags will remain.
    delete:
      summary: Delete a specific article
      tags:
        - Articles
      parameters:
        - in: path
          name: articleId
          required: true
          schema:
            type: string
          description: The ID of the article to delete
      responses:
        '204':
          description: Article successfully deleted
        '401':
          description: Unauthorized - User is not authenticated
        '403':
          description: Forbidden - User doesn't have permission to delete this article
        '404':
          description: Article not found
  security:
    '0':
      bearerAuth: []
  /auth/:
    post:
      summary: Login to get JWT token
      tags:
        - Session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: uuid
                  token:
                    type: string
                    description: JWT token for authentication
        '401':
          description: Invalid credentials
  /users:
    post:
      summary: Login to get JWT token
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for authentication
        '401':
          description: Invalid credentials
  /tags:
    get:
      summary: Get all tags
      tags:
        - Tags
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  tags:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tag'
  /tools:
    get:
      summary: Get all tools
      tags:
        - Tools
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  tools:
                    type: array
                    description: A list of all available tools
                    items:
                      $ref: '#/components/schemas/Tool'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Tag:
      type: object
      description: Represents a tag used for categorizing tools
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the tag
        name:
          type: string
          description: The name of the tag
      example:
        id: 123e4567-e89b-12d3-a456-426614174000
        name: javascript
      required:
        - id
        - name
    GetToken:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        token:
          type: string
          format: JWT
    Rate:
      type: object
      properties:
        sum:
          type: number
          description: The total sum of ratings for the article
          example: 10
    ArticleRate:
      type: object
      properties:
        userId:
          type: string
          description: The ID of the user who rated the article
          example: '12345'
        rate:
          type: number
          description: The rate given by the user
          example: 4
    Article:
      type: object
      required:
        - id
        - title
        - description
        - url
      properties:
        id:
          type: string
          description: The unique identifier of the article
        title:
          type: string
          description: The title of the article
        description:
          type: string
          description: A brief description of the article
        faviconUrl:
          type: string
          description: URL to the image of the article
        url:
          type: string
          description: The URL of the article
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          description: The tags associated with the article
        rate:
          $ref: '#/components/schemas/Rate'
          description: The rating information of the article
        yourRated:
          $ref: '#/components/schemas/ArticleRate'
          description: The user's specific rating of the article
      example:
        id: cbbdddf7-ad12-46cf-9e7c-c83ec7231ad3
        title: PostgreSQL
        description: The world is most advanced open source database.
        faviconUrl: https://www.postgresql.org/media/img/about/press/elephant.png
        url: https://www.postgresql.org/
        tags:
          - id: 8a8213f9-3dd4-4f1e-a5e4-f59d3229aebe
            name: database
          - id: 34a34fc9-7838-4b0d-afbd-a16b0b748b0e
            name: open source
        rate:
          sum: 15
        yourRated:
          rate: 5
    Login:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          maximum: 60
        password:
          type: string
          maximum: 60
          minimum: 12
    Tool:
      type: object
      description: Represents a tool with its details
      properties:
        name:
          type: string
          description: The name of the tool
        id:
          type: string
          format: uuid
          description: Unique identifier for the tool
        description:
          type: string
          description: A brief description of the tool
        url:
          type: string
          format: uri
          description: The URL associated with the tool
        type:
          type: string
          enum:
            - package
            - program
            - plugin
          description: The type of the tool
        icon:
          type: string
          format: uri
          description: The URL of the tool's icon
        tags:
          type: array
          description: List of tags associated with the tool
          items:
            $ref: '#/components/schemas/Tag'
      example:
        name: ReactJS DevTools
        id: 550e8400-e29b-41d4-a716-446655440000
        description: A powerful developer tool for debugging React applications
        url: https://reactjs.org/tutorial/tutorial.html
        type: plugin
        icon: https://example.com/icons/react-devtools.png
        tags:
          - id: a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
            name: react
          - id: 85f520d0-193c-4499-a496-7f4f1b93d130
            name: debugging
tags: []
