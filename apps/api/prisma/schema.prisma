generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cards {
  id           String       @id(map: "card_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question     String?      @db.VarChar(255)
  answer       String?      @db.VarChar(255)
  difficulties difficulties
  subjectId    String       @db.Uuid
  userId       String       @db.Uuid
  shapeId      String       @db.Uuid
  Shapes       Shapes       @relation(fields: [shapeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "card_shape_id_fk")
  Subjects     Subjects     @relation(fields: [subjectId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "card_subject_id_fk")
  Users        Users        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "cards_users_id_fk")
  Rates        Rates[]
}

model Rates {
  rate   Int
  id     String @id(map: "rate_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String @db.Uuid
  cardId String @db.Uuid
  Cards  Cards  @relation(fields: [cardId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "rate_card_id_fk")
  Users  Users  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "rate_users_id_fk")
}

model Sections {
  name      String   @db.VarChar(16)
  id        String   @id(map: "section_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subjectId String   @db.Uuid
  Subjects  Subjects @relation(fields: [subjectId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "section_subject_id_fk")
}

model Shapes {
  id    String  @id(map: "shape_pk") @unique(map: "shape_id_uindex") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  shape Int     @unique(map: "shape_shape_uindex")
  Cards Cards[]
}

model Subjects {
  id                    String                  @id(map: "subject_pk") @unique(map: "subject_subject_uindex") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String                  @db.VarChar(32)
  Cards                 Cards[]
  Sections              Sections[]
  Technologies_Subjects Technologies_Subjects[]
}

model Technologies {
  id                    String                  @unique(map: "technologies_id_uindex") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String                  @db.VarChar(32)
  Articles_Technologies Articles_Technologies[]
  Technologies_Subjects Technologies_Subjects[]
}

model Technologies_Subjects {
  id           String       @id(map: "technologies_subjects_pk") @unique(map: "technologies_subjects_id_uindex") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subjectId    String       @db.Uuid
  technologyId String       @db.Uuid
  Technologies Technologies @relation(fields: [technologyId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "technologiesId_technologies__id_fk")
  Subjects     Subjects     @relation(fields: [subjectId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "technologies_subjects_id_fk")
}

model Users {
  id       String  @id(map: "users_pk") @unique(map: "users_id_uindex") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username String  @unique(map: "users_username_uindex") @db.VarChar(32)
  email    String  @unique(map: "users_email_uindex") @db.VarChar(32)
  password String  @unique(map: "users_password_uindex") @db.VarChar(60)
  Cards    Cards[]
  Rates    Rates[]
}

model Articles {
  id                    String                  @id(map: "articles_pk") @unique(map: "articles_id_uindex") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                 String                  @db.VarChar
  description           String                  @db.VarChar
  imageSrc              String
  Articles_Technologies Articles_Technologies[]
}

model Articles_Technologies {
  id           String       @id(map: "articles_technologies_pk") @unique(map: "articles_technologies_id_uindex") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  technologyId String       @db.Uuid
  articleId    String       @db.Uuid
  Articles     Articles     @relation(fields: [articleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "articles_technologies_articles_id_fk")
  Technologies Technologies @relation(fields: [technologyId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "articles_technologies_technologies_id_fk")
}

enum difficulties {
  Junior
  Mid
  Senior
}
