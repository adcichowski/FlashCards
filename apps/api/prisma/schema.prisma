generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cards {
  id           String       @id(map: "card_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question     String?      @db.VarChar(255)
  answer       String?      @db.VarChar(255)
  difficulties difficulties
  userId       String       @db.Uuid
  shapeId      String       @db.Uuid
  Shapes       Shapes       @relation(fields: [shapeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "card_shape_id_fk")
  Users        Users        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "cards_users_id_fk")
}

model Shapes {
  id    String  @id(map: "shape_pk") @unique(map: "shape_id_uindex") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  shape Int     @unique(map: "shape_shape_uindex")
  Cards Cards[]
}

model Users {
  id             String           @id(map: "users_pk") @unique(map: "users_id_uindex") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username       String           @unique(map: "users_username_uindex") @db.VarChar(32)
  email          String           @unique(map: "users_email_uindex") @db.VarChar(32)
  password       String           @unique(map: "users_password_uindex") @db.VarChar(60)
  role           roles            @default(user)
  Articles_Rates Articles_Rates[]
  Cards          Cards[]
}

model Articles {
  id             String           @id(map: "articles_pk") @unique(map: "articles_id_uindex") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title          String           @db.VarChar
  url            String           @unique(map: "articles_url_uindex")
  isVerified     Boolean          @default(false)
  author         String?          @db.VarChar(32)
  faviconUrl     String?          @db.VarChar
  createdAt      Int?
  Articles_Rates Articles_Rates[]
  Articles_Tags  Articles_Tags[]
}

model Articles_Tags {
  id        String   @id(map: "articles_tags_pk") @unique(map: "articles_tags_id_uindex") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tagId     String   @db.Uuid
  articleId String   @db.Uuid
  Articles  Articles @relation(fields: [articleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "articles_tags_articleId_id_fk")
  Tags      Tags     @relation(fields: [tagId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "articles_tags_tagId_fk")
}

model Tags {
  id            String          @id(map: "tags_pk") @unique(map: "tags_id_uindex") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String          @unique(map: "tags_name_uindex") @db.VarChar(32)
  Articles_Tags Articles_Tags[]
  Tool_Tags     Tool_Tags[]
}

model Articles_Rates {
  id        String   @id(map: "articles_rates_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rate      Int
  userId    String   @db.Uuid
  articleId String   @db.Uuid
  Articles  Articles @relation(fields: [articleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "article_id_rate_fk")
  Users     Users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "articles_rates_users_id_fk")
}

model Tool_Tags {
  id     String @id(map: "tool_tags_pk") @unique(map: "tool_tags_id_uindex") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  toolId String @db.Uuid
  tagId  String @db.Uuid
  Tags   Tags   @relation(fields: [tagId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tool_tags_tags_id_fk")
  Tools  Tools  @relation(fields: [toolId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tool_tags_tools_id_fk")
}

model Tools {
  id          String      @id(map: "tools_pk") @unique(map: "tools_id_uindex") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String      @db.VarChar(64)
  description String?
  github      String?     @db.VarChar
  npm         String?     @db.VarChar
  type        tooltype?
  isVerified  Boolean?    @default(false)
  url         String?     @db.VarChar
  icon        String?     @db.VarChar
  Tool_Tags   Tool_Tags[]
}

enum difficulties {
  Junior
  Mid
  Senior
}

enum roles {
  admin
  moderator
  user
}

enum tooltype {
  package
  plugin
  program
}
